#!/usr/bin/env node
/**
 * @fileoverview Utilitaire pour v√©rifier le format des donn√©es et recommander les scripts √† utiliser
 * 
 * Ce script analyse un fichier de donn√©es d'activit√©s et conseille l'utilisateur sur
 * les scripts d'analyse qui peuvent √™tre utilis√©s avec ce format de donn√©es.
 * 
 * Usage: node check_data_format.js [ADRESSE_PORTEFEUILLE]
 */

import { readFile } from 'fs/promises';
import { existsSync } from 'fs';
import path from 'path';
import fs from 'fs';

async function checkDataFormat() {
  try {
    // R√©cup√©rer l'adresse du portefeuille depuis les arguments
    const args = process.argv.slice(2);
    const walletAddress = args[0] || process.env.ADDRESS_WALLET;
    
    if (!walletAddress) {
      console.error('‚ùå Erreur: Aucune adresse de portefeuille fournie.');
      console.error('Usage: node check_data_format.js ADRESSE_PORTEFEUILLE');
      return;
    }
    
    // V√©rifier le r√©pertoire de sortie
    const outputDir = 'output';
    if (!existsSync(outputDir)) {
      console.error(`‚ùå Erreur: Le r√©pertoire ${outputDir} n'existe pas.`);
      return;
    }
    
    // Chercher les fichiers associ√©s √† cette adresse de portefeuille
    const files = fs.readdirSync(outputDir).filter(file => file.includes(walletAddress));
    
    if (files.length === 0) {
      console.error(`‚ùå Aucun fichier trouv√© pour le portefeuille ${walletAddress}.`);
      console.error('Ex√©cutez acc_defi_activities.js pour g√©n√©rer des donn√©es.');
      return;
    }
    
    console.log(`üîç Fichiers trouv√©s pour ${walletAddress}: ${files.length} fichier(s)`);
    
    // V√©rifier le fichier principal des activit√©s d√©taill√©es
    const detailedFile = `activities_detailed_summary_${walletAddress}.json`;
    const detailedPath = path.join(outputDir, detailedFile);
    
    if (!existsSync(detailedPath)) {
      console.error(`‚ùå Fichier principal ${detailedFile} non trouv√©.`);
      console.error('Ex√©cutez acc_defi_activities.js pour g√©n√©rer ce fichier.');
      return;
    }
    
    // Analyser le fichier pour d√©terminer son format
    const data = await readFile(detailedPath, 'utf8');
    const jsonData = JSON.parse(data);
    
    let formatType = 'inconnu';
    let scriptCompatibility = {};
    
    // Format 1: API directe avec tableau data
    if (jsonData.data && Array.isArray(jsonData.data)) {
      formatType = 'API';
      scriptCompatibility = {
        'analyze_activities_advanced.js': true,
        'analyze_platforms.js': true,
        'analyze_token_movements.js': true,
        'analyze_time_patterns.js': true
      };
    }
    // Format 2: donn√©es agr√©g√©es
    else if (jsonData.activity_types && jsonData.platforms) {
      formatType = 'Agr√©g√©';
      scriptCompatibility = {
        'analyze_activities_advanced.js': false,
        'analyze_platforms.js': true,
        'analyze_token_movements.js': false,
        'analyze_time_patterns.js': false
      };
    }
    
    // Afficher les r√©sultats
    console.log(`\nüìä Analyse du format de donn√©es pour ${walletAddress}:`);
    console.log(`- Fichier: ${detailedFile}`);
    console.log(`- Type de format: ${formatType}`);
    console.log(`- Taille: ${(data.length / 1024).toFixed(2)} KB\n`);
    
    console.log('üõ†Ô∏è  Compatibilit√© avec les scripts:');
    Object.entries(scriptCompatibility).forEach(([script, compatible]) => {
      const status = compatible ? '‚úÖ Compatible' : '‚ùå Non compatible';
      console.log(`- ${script}: ${status}`);
    });
    
    // Compter les scripts compatibles et non compatibles
    const compatibleCount = Object.values(scriptCompatibility).filter(Boolean).length;
    const totalScripts = Object.keys(scriptCompatibility).length;
    
    console.log('\nüí° Conseils:');
    if (formatType === 'API') {
      console.log('- Ce fichier contient des donn√©es brutes d\'activit√©s et peut √™tre utilis√© avec tous les scripts d\'analyse.');
      console.log(`- Vous pouvez ex√©cuter les ${totalScripts} scripts d'analyse pour des r√©sultats complets.`);
    } else if (formatType === 'Agr√©g√©') {
      console.log('- Ce fichier contient des donn√©es agr√©g√©es et ne peut pas √™tre utilis√© avec tous les scripts d\'analyse.');
      console.log(`- Actuellement compatible avec ${compatibleCount}/${totalScripts} scripts d'analyse.`);
      console.log('\nüîÑ Pour obtenir l\'acc√®s √† TOUS les scripts d\'analyse:');
      console.log(`1. Ex√©cutez: node acc_defi_activities.js ${walletAddress}`);
      console.log('2. Cela g√©n√©rera des donn√©es brutes compl√®tes directement depuis l\'API Solscan.');
      console.log('3. Ces donn√©es permettront d\'utiliser toutes les fonctionnalit√©s d\'analyse disponibles.');
    } else {
      console.log('- Format de donn√©es non reconnu. Essayez de r√©g√©n√©rer les donn√©es avec acc_defi_activities.js');
      console.log(`- Commande recommand√©e: node acc_defi_activities.js ${walletAddress}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du format des donn√©es:', error);
    console.error('D√©tails:', error.stack || error.message);
  }
}

checkDataFormat();
