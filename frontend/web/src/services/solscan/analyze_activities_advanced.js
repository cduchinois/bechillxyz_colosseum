import { readFile, writeFile } from 'fs/promises';
import { existsSync } from 'fs';

/**
 * @fileoverview Script d'analyse avanc√©e des activit√©s DeFi sur Solana
 * 
 * Ce script prend un fichier JSON g√©n√©r√© par acc_defi_activities.js et produit
 * des analyses plus d√©taill√©es sur les activit√©s DeFi d'un portefeuille.
 * 
 * Format de donn√©es attendu:
 * 1. Format principal (acc_defi_activities.js) : 
 *    {
 *      "success": boolean,
 *      "data": [
 *        {
 *          "activity_type": string,
 *          "platform": string[],
 *          "value": number,
 *          "routers": { token1, token2, ... },
 *          ...
 *        },
 *        ...
 *      ],
 *      "metadata": { tokens: {...} }
 *    }
 * 
 * 2. Format secondaire (analyze_activities_detailed.js) :
 *    {
 *      "activity_types": { unique: [...], ... },
 *      "platforms": { ... },
 *      ...
 *    }
 * 
 * Usage: node analyze_activities_advanced.js [ADDRESS_WALLET]
 * ENV: ADDRESS_WALLET - Adresse du portefeuille Solana √† analyser
 */

/**
 * Normalise les donn√©es d'activit√©s pour s'assurer qu'elles sont dans un format standard
 * @param {Object} rawData - Donn√©es brutes √† normaliser
 * @returns {Object} - Donn√©es normalis√©es avec activitiesData et metadata
 * @throws {Error} - Si les donn√©es ne peuvent pas √™tre normalis√©es dans un format compatible
 */
function normalizeActivityData(rawData) {
  // Structure de retour standard
  const normalizedData = {
    activitiesData: [],
    metadata: {
      tokens: {}
    }
  };

  // Format principal: donn√©es directes de l'API (acc_defi_activities.js)
  if (rawData.data && Array.isArray(rawData.data)) {
    normalizedData.activitiesData = rawData.data;
    normalizedData.metadata = rawData.metadata || { tokens: {} };
    return normalizedData;
  } 
  
  // Format secondaire: statistiques agr√©g√©es
  else if (rawData.activity_types && rawData.activity_types.unique) {
    throw new Error('FORMAT_INCOMPATIBLE', 
      'Le fichier contient uniquement des statistiques agr√©g√©es, pas les donn√©es brutes des activit√©s ' +
      'n√©cessaires pour l\'analyse avanc√©e. Veuillez ex√©cuter acc_defi_activities.js pour g√©n√©rer les donn√©es brutes.');
  } 
  
  // Format non reconnu
  else {
    throw new Error('FORMAT_INCONNU', 
      'Structure de donn√©es incorrecte dans le fichier JSON. ' +
      'Veuillez ex√©cuter acc_defi_activities.js pour g√©n√©rer les donn√©es correctes.');
  }
}

/**
 * Fonction principale pour analyser de fa√ßon avanc√©e les activit√©s DeFi d'un portefeuille
 */
async function analyzeActivitiesAdvanced() {
  try {
    // R√©cup√©rer l'adresse du portefeuille depuis les arguments ou variables d'environnement
    const args = process.argv.slice(2);
    const walletAddress = args[0] || process.env.ADDRESS_WALLET;
    
    if (!walletAddress) {
      console.error('‚ùå Erreur: Aucune adresse de portefeuille fournie. Utilisez le format: node analyze_activities_advanced.js ADDRESS_WALLET');
      return;
    }
    
    // Pr√©parer le chemin du fichier sp√©cifique au portefeuille
    const specificFile = `./output/defi_activities_${walletAddress}.json`;
    
    // V√©rifier si le fichier existe
    if (!existsSync(specificFile)) {
      console.error(`‚ùå Erreur: Le fichier ${specificFile} n'existe pas.`);
      console.error('Ex√©cutez d\'abord acc_defi_activities.js avec cette adresse de portefeuille.');
      return;
    }
    
    console.log(`üí° Utilisation du fichier sp√©cifique au portefeuille: ${specificFile}`);
    const data = await readFile(specificFile, 'utf8');
    
    // R√©cup√©rer et valider les donn√©es
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch (parseError) {
      console.error('‚ùå Erreur de parsing JSON:', parseError.message);
      console.error('Le fichier ne contient pas de JSON valide.');
      return;
    }
    
    // Normaliser les donn√©es avec gestion d'erreurs
    let normalizedData;
    try {
      normalizedData = normalizeActivityData(jsonData);
    } catch (error) {
      console.error(`‚ùå ${error.message}`);
      if (error.code === 'FORMAT_INCOMPATIBLE' || error.code === 'FORMAT_INCONNU') {
        console.error(error.details || 'Format de donn√©es incompatible.');
      }
      return;
    }
    
    const { activitiesData } = normalizedData;
    
    // V√©rifier que nous avons des donn√©es √† traiter
    if (!activitiesData.length) {
      console.error('‚ùå Aucune activit√© trouv√©e dans les donn√©es.');
      return;
    }
    
    console.log(`üìä Analyse en cours de ${activitiesData.length} activit√©s...`);
    
    // Structures pour stocker les analyses
    const activityTypes = new Map();
    const platforms = new Map();
    const tokenAddresses = new Set();
    const tokenPairs = new Map();
    const valueRanges = {
      "0-1": 0,
      "1-5": 0,
      "5-10": 0,
      "10-50": 0,
      "50-100": 0,
      "100+": 0,
      "unknown": 0
    };
    
    // Analyser chaque activit√©
    activitiesData.forEach(activity => {
      // V√©rifier que l'activit√© a les propri√©t√©s requises
      if (!activity.activity_type) {
        console.warn('‚ö†Ô∏è Activit√© sans type d√©tect√©, ignor√©e');
        return;
      }
      
      // Analyse des types d'activit√©s
      const activityType = activity.activity_type;
      if (!activityTypes.has(activityType)) {
        activityTypes.set(activityType, { 
          count: 1,
          totalValue: activity.value || 0,
          platforms: {},
          tokens: {}
        });
      } else {
        const typeInfo = activityTypes.get(activityType);
        typeInfo.count++;
        if (activity.value) typeInfo.totalValue += activity.value;
        activityTypes.set(activityType, typeInfo);
      }
      
      // Classifier par plage de valeur
      if (typeof activity.value === 'number') {
        let valueRange;
        if (activity.value === 0) valueRange = "0-1";
        else if (activity.value <= 1) valueRange = "0-1";
        else if (activity.value <= 5) valueRange = "1-5";
        else if (activity.value <= 10) valueRange = "5-10";
        else if (activity.value <= 50) valueRange = "10-50";
        else if (activity.value <= 100) valueRange = "50-100";
        else valueRange = "100+";
        
        valueRanges[valueRange]++;
      } else {
        valueRanges["unknown"]++;
      }
      
      // Analyse des plateformes
      if (activity.platform && Array.isArray(activity.platform)) {
        activity.platform.forEach(platform => {
          if (!platform) return; // Ignorer les valeurs nulles/vides
          
          if (!platforms.has(platform)) {
            platforms.set(platform, { 
              count: 1, 
              activities: { [activityType]: 1 },
              tokens: {}
            });
          } else {
            const platformInfo = platforms.get(platform);
            platformInfo.count++;
            
            if (!platformInfo.activities[activityType]) {
              platformInfo.activities[activityType] = 1;
            } else {
              platformInfo.activities[activityType]++;
            }
            
            platforms.set(platform, platformInfo);
          }
          
          // Ajouter la plateforme aux statistiques du type d'activit√©
          const typeInfo = activityTypes.get(activityType);
          typeInfo.platforms[platform] = (typeInfo.platforms[platform] || 0) + 1;
        });
      }
      
      // Analyse des tokens
      if (activity.routers) {
        const { token1, token2 } = activity.routers;
        
        if (token1) {
          tokenAddresses.add(token1);
          
          // Ajouter aux stats du type d'activit√©
          const typeInfo = activityTypes.get(activityType);
          typeInfo.tokens[token1] = (typeInfo.tokens[token1] || 0) + 1;
          
          // Ajouter aux stats de la plateforme
          if (activity.platform && Array.isArray(activity.platform)) {
            activity.platform.forEach(platform => {
              if (!platform) return; // Ignorer les valeurs nulles/vides
              
              const platformInfo = platforms.get(platform);
              if (platformInfo) { // V√©rification suppl√©mentaire
                platformInfo.tokens[token1] = (platformInfo.tokens[token1] || 0) + 1;
              }
            });
          }
        }
        
        if (token2) {
          tokenAddresses.add(token2);
          
          // Ajouter aux stats du type d'activit√©
          const typeInfo = activityTypes.get(activityType);
          typeInfo.tokens[token2] = (typeInfo.tokens[token2] || 0) + 1;
          
          // Ajouter aux stats de la plateforme
          if (activity.platform && Array.isArray(activity.platform)) {
            activity.platform.forEach(platform => {
              if (!platform) return; // Ignorer les valeurs nulles/vides
              
              const platformInfo = platforms.get(platform);
              if (platformInfo) { // V√©rification suppl√©mentaire
                platformInfo.tokens[token2] = (platformInfo.tokens[token2] || 0) + 1;
              }
            });
          }
        }
        
        // Suivre les paires de tokens
        if (token1 && token2) {
          const pairKey = `${token1}_${token2}`;
          if (!tokenPairs.has(pairKey)) {
            tokenPairs.set(pairKey, {
              count: 1,
              token1,
              token2
            });
          } else {
            const pairInfo = tokenPairs.get(pairKey);
            pairInfo.count++;
            tokenPairs.set(pairKey, pairInfo);
          }
        }
      }
    });
    
    // Cr√©ation de l'objet r√©sultat
    const result = {
      summary: {
        totalActivities: activitiesData.length,
        uniqueActivityTypes: activityTypes.size,
        uniquePlatforms: platforms.size,
        uniqueTokens: tokenAddresses.size,
        uniqueTokenPairs: tokenPairs.size,
        valueDistribution: valueRanges
      },
      activityTypes: Object.fromEntries(activityTypes),
      platforms: Object.fromEntries(platforms),
      tokenPairs: Object.fromEntries(tokenPairs),
      tokens: {
        addresses: Array.from(tokenAddresses),
        metadata: normalizedData.metadata?.tokens || {}
      }
    };
    
    // Trouver la plateforme la plus utilis√©e
    let maxPlatformCount = 0;
    let mostUsedPlatform = '';
    platforms.forEach((value, key) => {
      if (value.count > maxPlatformCount) {
        maxPlatformCount = value.count;
        mostUsedPlatform = key;
      }
    });
    
    result.summary.mostUsedPlatform = mostUsedPlatform;
    
    // Trouver le type d'activit√© le plus courant
    let maxTypeCount = 0;
    let mostCommonType = '';
    activityTypes.forEach((value, key) => {
      if (value.count > maxTypeCount) {
        maxTypeCount = value.count;
        mostCommonType = key;
      }
    });
    
    result.summary.mostCommonActivityType = mostCommonType;
    
    // Pr√©parer le chemin du fichier avec l'adresse du portefeuille
    const outputFile = `./output/activities_advanced_summary_${walletAddress}.json`;
    
    // √âcrire les r√©sultats dans un fichier
    try {
      await writeFile(outputFile, JSON.stringify(result, null, 2));
      console.log(`‚úÖ Analyse avanc√©e termin√©e. R√©sultats √©crits dans ${outputFile}`);
    } catch (writeError) {
      console.error(`‚ùå Erreur lors de l'√©criture des r√©sultats:`, writeError.message);
      console.error(`V√©rifiez les permissions du r√©pertoire './output/'`);
      return;
    }
    
    // Afficher un r√©sum√© dans la console
    console.log('\nüìä R√©sum√© avanc√© des activit√©s:');
    console.log(`- Total des activit√©s: ${result.summary.totalActivities}`);
    console.log(`- Types d'activit√©s uniques: ${result.summary.uniqueActivityTypes}`);
    console.log(`- Plateformes uniques: ${result.summary.uniquePlatforms}`);
    console.log(`- Tokens uniques: ${result.summary.uniqueTokens}`);
    console.log(`- Paires de tokens uniques: ${result.summary.uniqueTokenPairs}`);
    console.log(`- Plateforme la plus utilis√©e: ${result.summary.mostUsedPlatform}`);
    console.log(`- Type d'activit√© le plus courant: ${result.summary.mostCommonActivityType}`);
    
    // Afficher les principales activit√©s avec leurs valeurs
    console.log('\nüîù Principaux types d\'activit√©s:');
    [...activityTypes.entries()]
      .sort((a, b) => b[1].count - a[1].count)
      .slice(0, 5)
      .forEach(([type, data]) => {
        console.log(`- ${type}: ${data.count} transactions, valeur totale: ${data.totalValue.toFixed(2)}`);
      });
      
    // Afficher les principales paires de tokens
    console.log('\nüí± Principales paires de tokens:');
    [...tokenPairs.entries()]
      .sort((a, b) => b[1].count - a[1].count)
      .slice(0, 5)
      .forEach(([pairKey, data]) => {
        const tokenMetadata = normalizedData.metadata?.tokens || {};
        const token1Symbol = (tokenMetadata[data.token1]?.token_symbol) || data.token1.substring(0, 8);
        const token2Symbol = (tokenMetadata[data.token2]?.token_symbol) || data.token2.substring(0, 8);
        console.log(`- ${token1Symbol} ‚Üî ${token2Symbol}: ${data.count} transactions`);
      });
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse avanc√©e:', error);
    console.error('D√©tails:', error.stack || error.message);
  }
}

// Ex√©cuter la fonction
analyzeActivitiesAdvanced();
