import { SolscanApiClient, DataUtils } from './utils/api_client.js';
import { existsSync } from 'fs';

/**
 * Classe pour collecter les donn√©es d'analyse d'un portefeuille Solana
 * avec support am√©lior√© de filtrage, exportation CSV et gestion d'erreurs
 */
class SolanaDataCollector {
  /**
   * Valide une adresse Solana
   * @param {string} address - L'adresse √† valider
   * @returns {boolean} true si l'adresse est valide, false sinon
   * @static
   */
  static validateSolanaAddress(address) {
    if (!address || typeof address !== 'string') {
      return false;
    }

    // V√©rifier la longueur de l'adresse
    if (address.length < 32 || address.length > 44) {
      return false;
    }

    // V√©rifier le format base58: caract√®res alphanum√©riques sans 0 (z√©ro), O (o majuscule), 
    // I (i majuscule) et l (L minuscule)
    const base58Regex = /^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/;
    return base58Regex.test(address);
  }
  
  /**
   * Constructeur
   * @param {string} walletAddress - L'adresse du portefeuille Solana
   * @param {object} options - Options de configuration
   * @param {number} options.pageSize - Nombre d'√©l√©ments par page
   * @param {number} options.maxPages - Nombre maximal de pages √† r√©cup√©rer
   * @param {boolean} options.includeTokenAccounts - Inclure les comptes de tokens
   * @param {boolean} options.includePortfolio - Inclure le portfolio
   * @param {boolean} options.includeTransactions - Inclure les transactions
   * @param {boolean} options.includeBalanceChanges - Inclure les changements de balance
   * @param {string} options.apiEndpoint - URL de l'API personnalis√©e (optionnel)
   * @param {string} options.apiKey - Cl√© API personnalis√©e (optionnel)
   * @param {number} options.maxRetries - Nombre maximal de tentatives en cas d'erreur
   * @param {string|Date} options.startDate - Date de d√©but pour le filtrage des transactions
   * @param {string|Date} options.endDate - Date de fin pour le filtrage des transactions
   * @param {string} options.transactionType - Type de transaction √† filtrer
   * @param {string} options.transactionStatus - Statut de transaction √† filtrer ('success', 'fail')
   * @param {boolean} options.verbose - Mode verbeux
   * @param {boolean} options.debug - Mode debug
   */
  constructor(walletAddress, options = {}) {
    // Valider l'adresse du portefeuille
    if (!SolanaDataCollector.validateSolanaAddress(walletAddress)) {
      throw new Error(`Adresse Solana invalide: ${walletAddress}. Une adresse Solana valide est encod√©e en base58 et a g√©n√©ralement entre 32 et 44 caract√®res.`);
    }
    
    this.walletAddress = walletAddress;
    
    // Configuration de l'API client avec options avanc√©es
    const apiClientOptions = {
      baseUrl: options.apiEndpoint,
      apiKey: options.apiKey,
      maxRetries: options.maxRetries || 5,
      debug: options.debug || false
    };
    
    this.apiClient = new SolscanApiClient(apiClientOptions);
    
    // Options g√©n√©rales
    this.options = {
      pageSize: options.pageSize || 100,
      maxPages: options.maxPages || 5,
      includeTokenAccounts: options.includeTokenAccounts !== false,
      includePortfolio: options.includePortfolio !== false,
      includeTransactions: options.includeTransactions !== false,
      includeBalanceChanges: options.includeBalanceChanges !== false,
      
      // Options de filtrage pour les transactions
      startDate: options.startDate || null,
      endDate: options.endDate || null,
      transactionType: options.transactionType || null,
      transactionStatus: options.transactionStatus || null,
      
      // Options d'export
      exportFormat: options.exportFormat || null, // 'csv', 'json', etc.
      exportPath: options.exportPath || './output',
      
      // Options de verbosit√©
      verbose: options.verbose || false,
      debug: options.debug || false,
      
      ...options
    };
    
    if (this.options.verbose) {
      console.log(`üîß Configuration du collecteur pour ${walletAddress}:`);
      console.log(`   - API endpoint: ${apiClientOptions.baseUrl || 'Par d√©faut'}`);
      console.log(`   - Filtres transactions: ${this.getFilterSummary()}`);
    }
  }
  
  /**
   * R√©sume les filtres actifs pour les logs
   * @returns {string} Un r√©sum√© des filtres actifs
   */
  getFilterSummary() {
    const filters = [];
    
    if (this.options.startDate) {
      const date = this.options.startDate instanceof Date 
        ? this.options.startDate.toISOString().split('T')[0]
        : this.options.startDate;
      filters.push(`apr√®s ${date}`);
    }
    
    if (this.options.endDate) {
      const date = this.options.endDate instanceof Date 
        ? this.options.endDate.toISOString().split('T')[0]
        : this.options.endDate;
      filters.push(`avant ${date}`);
    }
    
    if (this.options.transactionType) {
      filters.push(`type: ${this.options.transactionType}`);
    }
    
    if (this.options.transactionStatus) {
      filters.push(`statut: ${this.options.transactionStatus}`);
    }
    
    return filters.length > 0 ? filters.join(', ') : 'aucun';
  }
  
  /**
   * Collecte toutes les donn√©es demand√©es
   * @returns {Promise<object>} - Les donn√©es collect√©es
   */
  async collectAllData() {
    console.log(`üîç Collecte des donn√©es pour le portefeuille ${this.walletAddress}...`);
    
    const result = {
      walletAddress: this.walletAddress,
      collectedAt: new Date().toISOString(),
      defiActivities: null,
      tokenAccounts: null,
      portfolio: null,
      transactions: null,
      balanceChanges: null,
    };
    
    try {
      // Collecter les activit√©s DeFi (toujours incluses)
      result.defiActivities = await this.collectDefiActivities();
      
      // Collecter les donn√©es optionnelles en parall√®le
      const optionalData = await Promise.allSettled([
        this.options.includeTokenAccounts ? this.collectTokenAccounts() : null,
        this.options.includePortfolio ? this.collectPortfolio() : null,
        this.options.includeTransactions ? this.collectTransactions() : null,
        this.options.includeBalanceChanges ? this.collectBalanceChanges() : null,
      ]);
      
      // Assigner les r√©sultats des promises au r√©sultat final
      if (this.options.includeTokenAccounts) {
        result.tokenAccounts = optionalData[0].status === 'fulfilled' ? optionalData[0].value : null;
      }
      
      if (this.options.includePortfolio) {
        result.portfolio = optionalData[1].status === 'fulfilled' ? optionalData[1].value : null;
      }
      
      if (this.options.includeTransactions) {
        result.transactions = optionalData[2].status === 'fulfilled' ? optionalData[2].value : null;
      }
      
      if (this.options.includeBalanceChanges) {
        result.balanceChanges = optionalData[3].status === 'fulfilled' ? optionalData[3].value : null;
      }
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la collecte des donn√©es: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Collecte les activit√©s DeFi avec pagination intelligente
   * @returns {Promise<object>} - Les activit√©s DeFi
   */
  async collectDefiActivities() {
    console.log('\nüìä Collecte des activit√©s DeFi...');
    
    try {
      // V√©rifier si un fichier sp√©cifique √† ce portefeuille existe d√©j√†
      const specificOutputFile = `./output/activities_detailed_summary_${this.walletAddress}.json`;
      if (existsSync(specificOutputFile)) {
        console.log(`üí° Fichier existant d√©tect√©: ${specificOutputFile}`);
        console.log(`üí° Utilisation des donn√©es existantes sans appel API...`);
        
        const existingData = await DataUtils.loadFromJson(specificOutputFile);
        
        // Nous n'utilisons plus le fichier standard
        
        console.log(`‚úÖ ${existingData.data?.length || 0} activit√©s DeFi charg√©es depuis le fichier existant`);
        return existingData;
      }
      
      console.log(`üí° Aucun fichier existant trouv√©, r√©cup√©ration des donn√©es via API...`);
      
      let allActivities = [];
      let page = 1;
      let hasMoreData = true;
      
      while (hasMoreData && page <= this.options.maxPages) {
        console.log(`   Page ${page}/${this.options.maxPages}...`);
        
        const data = await this.apiClient.getDefiActivities(this.walletAddress, {
          page,
          page_size: this.options.pageSize
        });
        
        if (!data.data || !Array.isArray(data.data) || data.data.length === 0) {
          hasMoreData = false;
        } else {
          allActivities = allActivities.concat(data.data);
          
          // Si on re√ßoit moins d'√©l√©ments que la taille de page, on a tout r√©cup√©r√©
          if (data.data.length < this.options.pageSize) {
            hasMoreData = false;
          }
        }
        
        // Conserver les m√©tadonn√©es
        if (page === 1) {
          this.metaData = data.metadata;
        }
        
        page++;
      }
      
      // Construire le r√©sultat final
      const result = {
        data: allActivities,
        metadata: this.metaData
      };
      
      // Sauvegarder uniquement dans le fichier sp√©cifique au portefeuille
      await DataUtils.saveToJson(specificOutputFile, result);
      
      console.log(`‚úÖ ${allActivities.length} activit√©s DeFi collect√©es`);
      console.log(`‚úÖ Donn√©es sauvegard√©es dans ${specificOutputFile}`);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå Erreur lors de la collecte des activit√©s DeFi: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Collecte les comptes de tokens
   * @returns {Promise<object>} - Les comptes de tokens
   */
  async collectTokenAccounts() {
    console.log('\nüí∞ Collecte des comptes de tokens...');
    
    try {
      // V√©rifier si un fichier sp√©cifique √† ce portefeuille existe d√©j√†
      const specificOutputFile = `./output/token_accounts_${this.walletAddress}.json`;
      if (existsSync(specificOutputFile)) {
        console.log(`üí° Fichier existant d√©tect√©: ${specificOutputFile}`);
        console.log(`üí° Utilisation des donn√©es existantes sans appel API...`);
        
        const existingData = await DataUtils.loadFromJson(specificOutputFile);
        
        // Nous n'utilisons plus le fichier standard
        
        console.log(`‚úÖ Comptes de tokens charg√©s depuis le fichier existant`);
        return existingData;
      }
      
      console.log(`üí° Aucun fichier existant trouv√©, r√©cup√©ration des donn√©es via API...`);
      
      const data = await this.apiClient.getTokenAccounts(this.walletAddress);
      
      // Sauvegarder uniquement dans le fichier sp√©cifique au portefeuille
      await DataUtils.saveToJson(specificOutputFile, data);
      
      console.log(`‚úÖ Comptes de tokens collect√©s`);
      console.log(`‚úÖ Donn√©es sauvegard√©es dans ${specificOutputFile}`);
      
      return data;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la collecte des comptes de tokens: ${error.message}`);
      return null;
    }
  }
  
  /**
   * Collecte le portfolio du portefeuille
   * @returns {Promise<object>} - Le portfolio
   */
  async collectPortfolio() {
    console.log('\nüìà Collecte du portfolio...');
    
    try {
      // V√©rifier si un fichier sp√©cifique √† ce portefeuille existe d√©j√†
      const specificOutputFile = `./output/portfolio_${this.walletAddress}.json`;
      if (existsSync(specificOutputFile)) {
        console.log(`üí° Fichier existant d√©tect√©: ${specificOutputFile}`);
        console.log(`üí° Utilisation des donn√©es existantes sans appel API...`);
        
        const existingData = await DataUtils.loadFromJson(specificOutputFile);
        
        // Nous n'utilisons plus le fichier standard
        
        console.log(`‚úÖ Portfolio charg√© depuis le fichier existant`);
        return existingData;
      }
      
      console.log(`üí° Aucun fichier existant trouv√©, r√©cup√©ration des donn√©es via API...`);
      
      const data = await this.apiClient.getPortfolio(this.walletAddress);
      
      // Sauvegarder uniquement dans le fichier sp√©cifique au portefeuille
      await DataUtils.saveToJson(specificOutputFile, data);
      
      console.log(`‚úÖ Portfolio collect√©`);
      console.log(`‚úÖ Donn√©es sauvegard√©es dans ${specificOutputFile}`);
      
      return data;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la collecte du portfolio: ${error.message}`);
      return null;
    }
  }
  
  /**
   * Collecte les transactions avec pagination bas√©e sur la signature de la derni√®re transaction
   * et support de filtrage par date, type et statut
   * @param {object} overrideOptions - Options pour remplacer temporairement les options par d√©faut
   * @returns {Promise<object>} - Les transactions
   */
  async collectTransactions(overrideOptions = {}) {
    console.log('\nüîÑ Collecte des transactions...');
    
    // Fusionner les options par d√©faut avec les options temporaires
    const options = { ...this.options, ...overrideOptions };
    
    // Afficher les filtres si en mode verbeux
    if (options.verbose && this.getFilterSummary() !== 'aucun') {
      console.log(`üîç Filtres actifs: ${this.getFilterSummary()}`);
    }
    
    try {
      // V√©rifier si un fichier sp√©cifique √† ce portefeuille existe d√©j√† et si forceRefresh n'est pas activ√©
      const specificOutputFile = `./output/transactions_${this.walletAddress}.json`;
      let shouldFetchData = true;
      let existingData = null;
      
      if (existsSync(specificOutputFile) && !options.forceRefresh) {
        console.log(`üí° Fichier existant d√©tect√©: ${specificOutputFile}`);
        existingData = await DataUtils.loadFromJson(specificOutputFile);
        
        // V√©rifier si nous avons suffisamment de transactions et pas de filtres actifs
        // La structure peut √™tre soit { transactions: [] } soit { data: [] }
        const existingTransactionsLength = existingData.transactions?.length || existingData.data?.length || 0;
        const hasFilters = options.startDate || options.endDate || options.transactionType || options.transactionStatus;
        
        if (existingTransactionsLength >= options.maxTransactions && !hasFilters) {
          console.log(`‚úÖ ${existingTransactionsLength} transactions d√©j√† disponibles dans le fichier existant (max ${options.maxTransactions})`);
          shouldFetchData = false;
          
          // Si un export CSV est demand√©, on utilise les donn√©es existantes
          if (options.exportFormat === 'csv') {
            await this.exportTransactionsToCSV(existingData, options);
          }
          
          return existingData;
        } else {
          if (hasFilters) {
            console.log(`üîç Des filtres sont actifs, r√©cup√©ration des donn√©es requise pour application des filtres`);
          } else {
            console.log(`‚ö†Ô∏è  ${existingTransactionsLength} transactions trouv√©es dans le fichier existant, collecte de donn√©es suppl√©mentaires requise...`);
          }
        }
      }
      
      console.log(`üîÑ R√©cup√©ration des donn√©es via API...`);
      
      // Configuration pour la collecte des transactions
      const maxTransactions = options.maxTransactions || 200; // Objectif par d√©faut: 200 transactions
      const pageSize = 40; // Taille de page maximale autoris√©e par l'API
      const maxBatches = options.maxBatches || 5; // Limite par d√©faut: 5 lots de requ√™tes
      
      console.log(`üîí Configuration: r√©cup√©ration de ${maxTransactions} transactions max en ${maxBatches} lots de ${pageSize}`);
      
      // Initialiser le tableau avec les transactions existantes s'il y en a
      let allTransactions = [];
      
      // G√©rer les diff√©rentes structures possibles
      if (existingData && !options.forceRefresh) {
        if (existingData.transactions && Array.isArray(existingData.transactions)) {
          allTransactions = existingData.transactions;
        } else if (existingData.data && Array.isArray(existingData.data)) {
          allTransactions = existingData.data;
        }
        console.log(`üîÑ D√©marrage avec ${allTransactions.length} transactions d√©j√† collect√©es`);
      }

      let batchCount = 0;
      let hasMoreData = true;
      let lastSignature = null;
      // Si nous avons des transactions existantes, utiliser la derni√®re signature pour la pagination

      // Si forceRefresh est activ√©, on repart de z√©ro
      if (options.forceRefresh) {
        console.log(`üîÑ Mode force refresh activ√©: collecte des donn√©es depuis le d√©but`);
        allTransactions = [];
        lastSignature = null;
      }

      if (allTransactions.length > 0 && !options.forceRefresh) {
        console.log(`üîÑ Utilisation de la derni√®re transaction existante pour la pagination`);
        // Les signatures de transactions peuvent √™tre dans diff√©rents champs selon l'API
        lastSignature = allTransactions[allTransactions.length - 1].signature || 
                       allTransactions[allTransactions.length - 1].tx_hash;
        console.log(`   Derni√®re signature trouv√©e: ${lastSignature}`);
        console.log(allTransactions[allTransactions.length - 1].signature);
        if (lastSignature) {
          console.log(`üîÑ Utilisation de la signature existante pour la pagination: ${lastSignature.substring(0, 15)}...`);
        } else {
          console.log(`‚ö†Ô∏è Aucune signature trouv√©e dans les transactions existantes, impossible d'utiliser la pagination`);
        }
      }
      else {
        console.log(`üîÑ Aucune transaction existante trouv√©e, d√©marrage de la collecte depuis le d√©but`);
          shouldFetchData = true;
          // Options pour l'API, incluant les filtres applicables c√¥t√© serveur
          const apiOptions = { 
            limit: pageSize,
            // On passe les filtres pour que l'API puisse les afficher dans ses logs,
            // m√™me s'ils seront principalement appliqu√©s c√¥t√© client
            startDate: options.startDate,
            endDate: options.endDate,
            status: options.transactionStatus,
            type: options.transactionType
          };
          const dataApi = await this.apiClient.getTransactions(this.walletAddress, apiOptions);
          // console.log(dataApi);
          const transactions = dataApi.data || [];
          // console.log(transactions);
          console.log(`   ${transactions.length} transactioooons r√©cup√©r√©es`);
          allTransactions = allTransactions.concat(transactions);
          console.log(`   ${allTransactions.length} transactions r√©cup√©r√©eeeees`);
          batchCount++;
          // console.log(`   ${data.length} transactions r√©cup√©r√©es`);
      }
      
      while (hasMoreData && batchCount < maxBatches && allTransactions.length < maxTransactions) {
      // while (hasMoreData && batchCount < maxBatches && allTransactions.length < maxTransactions || allTransactions.length == 0) {
        console.log(`   Lot ${batchCount + 1}/${maxBatches}${lastSignature ? ' (avec pagination par signature)' : ' (premi√®re requ√™te)'}...`);
        console.log(`   Transactions collect√©es jusqu'√† pr√©sent: ${allTransactions.length}/${maxTransactions}`);
        
        // Options pour l'API, incluant les filtres applicables c√¥t√© serveur
        const apiOptions = { 
          limit: pageSize,
          // On passe les filtres pour que l'API puisse les afficher dans ses logs,
          // m√™me s'ils seront principalement appliqu√©s c√¥t√© client
          startDate: options.startDate,
          endDate: options.endDate,
          status: options.transactionStatus,
          type: options.transactionType
        };
        
        // Ajouter le param√®tre before pour la pagination bas√©e sur les signatures
        if (lastSignature) {
          apiOptions.before = lastSignature;
          console.log(`   Pagination avec signature: ${lastSignature.substring(0, 15)}...`);
        }
        
        console.log(`   Tentative de r√©cup√©ration de ${pageSize} transactions suppl√©mentaires...`);
        const dataApi = await this.apiClient.getTransactions(this.walletAddress, apiOptions);
        // console.log(data);


        const transactions = dataApi.data || [];
        // console.log(transactions);
        if (!transactions || !Array.isArray(transactions) || transactions.length === 0) {
          hasMoreData = false;
          console.log(`   Aucune transaction suppl√©mentaire trouv√©e`);
        } else {
          allTransactions = allTransactions.concat(transactions);
          console.log(`   ${transactions.length} transactions r√©cup√©r√©es (total: ${allTransactions.length})`);
          
          // Sauvegarder la signature de la derni√®re transaction pour la pagination bas√©e sur les signatures
          if (transactions.length > 0) {
            // La signature peut √™tre dans le champ 'signature' ou 'tx_hash' selon l'API
            lastSignature = transactions[transactions.length - 1].signature || 
                           transactions[transactions.length - 1].tx_hash;
                           
            if (lastSignature) {
              console.log(`   Signature pour la prochaine pagination: ${lastSignature.substring(0, 15)}...`);
            } else {
              console.log(`   ‚ö†Ô∏è Aucune signature trouv√©e dans la derni√®re transaction, impossible de continuer la pagination`);
              hasMoreData = false;
            }
          }
          
          // Si on re√ßoit moins d'√©l√©ments que la taille de page, on a tout r√©cup√©r√©
          if (transactions.length < pageSize) {
            hasMoreData = false;
            console.log(`   Toutes les transactions disponibles ont √©t√© r√©cup√©r√©es`);
          }
        }
        batchCount++;
      }
      
      // Appliquer les filtres c√¥t√© client
      let filteredTransactions = allTransactions;
      const hasFilters = options.startDate || options.endDate || options.transactionType || options.transactionStatus;
      
      if (hasFilters) {
        console.log(`üîç Application des filtres c√¥t√© client...`);
        
        // Filtrer par date de d√©but
        if (options.startDate) {
          const startDate = options.startDate instanceof Date 
            ? options.startDate 
            : new Date(options.startDate);
          
          filteredTransactions = filteredTransactions.filter(tx => {
            // Les dates peuvent √™tre stock√©es dans block_time ou time
            const txDate = tx.time ? new Date(tx.time) : 
                          tx.block_time ? new Date(tx.block_time * 1000) : null;
            
            return txDate && txDate >= startDate;
          });
          
          console.log(`   Filtre par date de d√©but (${startDate.toISOString()}): ${filteredTransactions.length} transactions restantes`);
        }
        
        // Filtrer par date de fin
        if (options.endDate) {
          const endDate = options.endDate instanceof Date 
            ? options.endDate 
            : new Date(options.endDate);
          
          filteredTransactions = filteredTransactions.filter(tx => {
            // Les dates peuvent √™tre stock√©es dans block_time ou time
            const txDate = tx.time ? new Date(tx.time) : 
                          tx.block_time ? new Date(tx.block_time * 1000) : null;
            
            return txDate && txDate <= endDate;
          });
          
          console.log(`   Filtre par date de fin (${endDate.toISOString()}): ${filteredTransactions.length} transactions restantes`);
        }
        
        // Filtrer par type de transaction
        if (options.transactionType) {
          filteredTransactions = filteredTransactions.filter(tx => {
            // Le type peut √™tre dans diff√©rents champs selon l'API
            const txType = tx.type || 
                          (tx.parsed_instructions && tx.parsed_instructions[0] ? tx.parsed_instructions[0].type : null);
            
            // V√©rifier si le type contient la cha√Æne recherch√©e (insensible √† la casse)
            return txType && txType.toLowerCase().includes(options.transactionType.toLowerCase());
          });
          
          console.log(`   Filtre par type (${options.transactionType}): ${filteredTransactions.length} transactions restantes`);
        }
        
        // Filtrer par statut
        if (options.transactionStatus) {
          filteredTransactions = filteredTransactions.filter(tx => {
            return tx.status && tx.status.toLowerCase() === options.transactionStatus.toLowerCase();
          });
          
          console.log(`   Filtre par statut (${options.transactionStatus}): ${filteredTransactions.length} transactions restantes`);
        }
      }
      
      // Construire le r√©sultat final en limitant au nombre maximum de transactions souhait√©
      const finalTransactions = filteredTransactions.slice(0, maxTransactions);
      
      // Adapter la structure en fonction de la structure de l'API
      // L'API retourne { success: true, data: [...transactions], metadata: {} }
      const result = {
        success: true,
        data: finalTransactions,
        metadata: {
          total: finalTransactions.length,
          batches_fetched: batchCount,
          max_batches: maxBatches,
          batch_size: pageSize,
          max_requested: maxTransactions,
          pagination_method: "signature_based",
          last_signature: lastSignature,
          address: this.walletAddress,
          collected_at: new Date().toISOString(),
          filters: {
            startDate: options.startDate ? (options.startDate instanceof Date ? options.startDate.toISOString() : options.startDate) : null,
            endDate: options.endDate ? (options.endDate instanceof Date ? options.endDate.toISOString() : options.endDate) : null,
            transactionType: options.transactionType || null,
            transactionStatus: options.transactionStatus || null
          }
        }
      };
      
      // Sauvegarder dans le fichier sp√©cifique au portefeuille (sauf si ce sont des r√©sultats filtr√©s)
      if (!hasFilters) {
        console.log(`üí° Aucun filtre actif, sauvegarde des donn√©es dans le fichier sp√©cifique au portefeuille...`);
        console.log(`   ${finalTransactions.length} transactions collect√©es`);
        // console.dir(result, { depth: null });
        await DataUtils.saveToJson(specificOutputFile, result);
        console.log(`‚úÖ Donn√©es sauvegard√©es dans ${specificOutputFile}`);
      } else {
        // Si des filtres sont appliqu√©s, on sauvegarde dans un fichier s√©par√© avec le nom des filtres
        const filtersString = Object.entries(result.metadata.filters)
          .filter(([_, value]) => value !== null)
          .map(([key, value]) => {
            if (key.includes('Date') && value) {
              // Formater les dates plus simplement
              return `${key.replace('Date', '')}-${value.split('T')[0]}`;
            }
            return value ? `${key}-${value}` : null;
          })
          .filter(Boolean)
          .join('_');
          
        if (filtersString) {
          const filteredOutputFile = `./output/transactions_${this.walletAddress}_${filtersString}.json`;
          await DataUtils.saveToJson(filteredOutputFile, result);
          console.log(`‚úÖ Donn√©es filtr√©es sauvegard√©es dans ${filteredOutputFile}`);
        }
      }
      
      // Si un export CSV est demand√©
      if (options.exportFormat === 'csv') {
        await this.exportTransactionsToCSV(result, options);
      }
      
      // Logs de fin
      console.log(`‚úÖ ${finalTransactions.length}/${allTransactions.length} transactions apr√®s filtrage`);
      console.log(`‚úÖ ${batchCount} lots de requ√™tes utilis√©s (maximum: ${maxBatches})`);
      
      if (allTransactions.length < maxTransactions && !hasFilters) {
        console.log(`‚ÑπÔ∏è  Moins de ${maxTransactions} transactions recolt√©es pour ce portefeuille`);
      } else if (allTransactions.length >= maxTransactions) {
        console.log(`‚úÖ Objectif de ${maxTransactions} transactions atteint`);
      }
      
      return result;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la collecte des transactions: ${error.message}`);
      if (options.debug) {
        console.error(error.stack);
      }
      return { 
        success: false, 
        error: error.message,
        data: []
      };
    }
  }
  
  /**
   * Exporte les transactions au format CSV
   * @param {object} transactions - Les transactions √† exporter
   * @param {object} options - Options d'exportation
   * @returns {Promise<string>} - Le chemin du fichier export√©
   */
  async exportTransactionsToCSV(transactions, options = {}) {
    try {
      // Importer le module CsvExporter
      const { CsvExporter } = await import('./utils/csv_exporter.js');
      
      // D√©terminer le chemin de sortie
      const exportDir = options.exportPath || './output';
      const fileName = options.exportFileName || 
                      CsvExporter.generateFileName('transactions', this.walletAddress);
      
      const outputPath = `${exportDir}/${fileName}`;
      
      console.log(`üìä Exportation des transactions au format CSV...`);
      
      // Exporter les transactions
      const exportedPath = await CsvExporter.exportTransactionsToCSV(
        transactions,
        outputPath,
        options.exportFields || null
      );
      
      console.log(`‚úÖ Transactions export√©es avec succ√®s dans ${exportedPath}`);
      return exportedPath;
    } catch (error) {
      console.error(`‚ùå Erreur lors de l'exportation en CSV: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Collecte les changements de balance
   * @returns {Promise<object>} - Les changements de balance
   */
  async collectBalanceChanges() {
    console.log('\nüí± Collecte des changements de balance...');
    
    try {
      // V√©rifier si un fichier sp√©cifique √† ce portefeuille existe d√©j√†
      const specificOutputFile = `./output/balance_changes_${this.walletAddress}.json`;
      if (existsSync(specificOutputFile)) {
        console.log(`üí° Fichier existant d√©tect√©: ${specificOutputFile}`);
        console.log(`üí° Utilisation des donn√©es existantes sans appel API...`);
        
        const existingData = await DataUtils.loadFromJson(specificOutputFile);
        
        // Nous n'utilisons plus le fichier standard
        
        console.log(`‚úÖ Changements de balance charg√©s depuis le fichier existant`);
        return existingData;
      }
      
      console.log(`üí° Aucun fichier existant trouv√©, r√©cup√©ration des donn√©es via API...`);
      
      const data = await this.apiClient.getBalanceChanges(this.walletAddress);
      
      // Sauvegarder uniquement dans le fichier sp√©cifique au portefeuille
      await DataUtils.saveToJson(specificOutputFile, data);
      
      console.log(`‚úÖ Changements de balance collect√©s`);
      console.log(`‚úÖ Donn√©es sauvegard√©es dans ${specificOutputFile}`);
      
      return data;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la collecte des changements de balance: ${error.message}`);
      return null;
    }
  }
}

export default SolanaDataCollector;
